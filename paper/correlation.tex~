\section{Correlation Quantification}
\label{correlationquantification}
%In Section~\ref{matchingresult} we have shown password structure distributions and the percentages of passwords containing each type of personal information. These results helped us to draw interesting observations. However, until this point we do not have a clear idea on how much 

While the statistical numbers above show the correlation between each
type of personal information and passwords, they cannot accurately
measure the degree of personal information involvement in an
individual password. In~\cite{castelluccia2013privacy}, Longest Common
Sequence and a modified JS are used to measure the
correlations. However, their results end up having two metrics for
each type of personal information. Besides, their metrics fail to
differentiate fragmented and continued personal information. Thus, we
introduce a new metric---Coverage---to quantify the involvement of
personal information in the creation of an individual password in an
accurate and systematic fashion.
 
%We seek a comprehensive method to quantify the correlation between passwords and all types of available personal information. Thereby we create a novel metric -- Coverage.

\subsection{Coverage}
\label{coverage}
The value of Coverage ranges from 0 to 1. A larger Coverage implies a
stronger correlation, and Coverage ``0" means no personal information
is included in a password and Coverage ``1" means the entire password
is perfectly matched with one type of personal information. While
Coverage is mainly used for measuring an individual password, the
average Coverage also reflects the degree of correlation in a set of
passwords. In the following, we describe the algorithm to compute
Coverage, present a detailed example to illustrate how Coverage works,
and elaborate the key features of Coverage.

\subsubsection{Computation Method}
\label{computationmethod}
To compute Coverage, we take password and personal information in
terms of strings as input and use a sliding window approach to
conducting the computation. We maintain a dynamic-sized window sliding
from the beginning to the end of the password. The initial size of the
window is 2. If the segment covered by the window matches to a certain
type of personal information, we enlarge the window size by 1. Then we
try again to match the segment in the grown window to personal
information. If a match is found, we further enlarge the window size
until a mis-match happens. At this point, we reset the window size to
the initial value 2 and slide the window to the password symbol that
causes the mis-match in the previous window. We maintain an array
called {\em tag array} with the same length as the password to record
the length of each matched password segment. For example, assume a
password with length of 8, its tag array is
[$4_{1},4_{2},4_{3},4_{4},0,0,2_{1},2_{2}$]. The first four elements
in the array, i.e., \{$4_{1},4_{2},4_{3},4_{4}$\}, indicate that the
first 4 password symbols match certain type of personal
information. The following two elements in the array, i.e., \{0,0\},
indicate that the 5th and 6th symbols have no match. The last two
elements in the array, i.e., \{$2_{1},2_{2}$\}, indicate that the 7th
and 8th symbols again match certain type of personal information. The
personal information types matched with different password segments
may or may not be the same. After we eventually slide window through
the entire password string, the tag array is used to compute the value
of Coverage---the sum of squares of matched password segment length
divided by the square of password length. Mathematically we have
\begin{equation} \label{eq1}
\begin{split}
CVG & = \sum_{i=1}^n (\frac{l_i^2}{L^2}), \\
\end{split}
\end{equation}
where $n$ denotes the number of matched password segments, $l_i$
denotes the length of corresponding matched password segment, and $L$
is the length of the password. We show the algorithm of computing
Coverage in Algorithm~\ref{alg2}.
%Note that different from the matching algorithm introduced before, we aim to make the matching for Coverage simpler in order to keep it universally applicable. Namely we try to restrain ad-hoc processing on each type of personal information minimum. Toward this end, we do not include various permutations of birthday. Cases like DD+MM+YYYY are ignored and we keep the only case of YYYY+MM+DD, which conforms to Chinese conventions. However, we keep full name and name initials to match names because name initials are very common in passwords. We believe little ad-hoc processing is still acceptable in computation of Coverage. As a conclusion, only names have 2 permutations, other personal information keep their original format. 
A match is found if at least a 2-symbol long password segment matches
to a substring of certain personal information.

\begin{algorithm}[t]
\caption{Compute Coverage.}
\label{alg2}
\begin{algorithmic}[1]
\Procedure{Cvg}{$pwd$,$infolist$}
\State $windowsize \gets$ 2
\State $pwdlen \gets$ len($pwd$)
\State $matchtag \gets$ [0]*$pwdlen$
\State $matchmark \gets $ 0
\State $cvg \gets $ 0
\While {$windowsize \le $len($pwd$)}
\State $passseg \gets pwd[0:windowsize]$
\If {$passseg$ = substring of $infolist$}
\For {$j \gets matchmark$ to $matchmark$+$windowsize$}
\State $matchtag[j] \gets windowsize$
\EndFor
\If {$windowsize$ != len($pwd$)}
\State $windowsize \gets windowsize$+1
\EndIf
\Else
\State $matchmark \gets matchmark$+$windowsize$
\State $pwd \gets pwd[windowsize:]$
\State $windowsize \gets$ 2
\EndIf
\EndWhile
\For {$eachitem$ in $matchtag$}
\State $cvg \gets cvg + eachitem$
\EndFor
\State \Return $cvg/(pwdlen * pwdlen)$
\EndProcedure
\end{algorithmic}
\end{algorithm}

To better illustrate how Coverage is computed, we show a simple
example in Figure~\ref{f1}. Here we assume a user named Alice, who was
born on August 16, 1988. We also assume that her password happens to
be ``alice816". If we apply the matching algorithm in
Section~\ref{matchingresult}, the structure of this password will be
[NAME][BD]. Apparently her password is highly related to her personal
information. To quantify this correlation, we follow the
Algorithm~\ref{alg2} to compute Coverage for her. The computation
steps are shown in Figure~\ref{f1}, and each step is detailed as
follows. In step (a), the password is prepared for a window to slide
through. Note the personal information includes ``alice" as name and
``19880816" as birthday. The tag array is initialized as [0, 0, 0, 0,
  0, 0, 0, 0]. In step (b), the window size is initialized to 2 so
that the first two symbols in the password are covered. As ``al" is a
substring of Alice's name, a match is found. Therefore, we extend the
window size by 1 and the tag array is updated as [$2_{1}, 2_{2}$, 0,
  0, 0, 0, 0, 0]. From step (c) to step (e), the window keeps growing
since matches are continuously found. The tag array also keeps being
updated. Until step (f), the window now covers ``alice8", which is not
a substring of ``alice" or ``19880816." Therefore, the window size is
reset to 2 and the window slides to the position of the symbol of the
previous window that causes the mis-match (i.e., the position of
``8"). The tag array remains unchanged. In step (g), the window of
size 2 now covers ``81", which is a substring of birthday, again we
extend the window by 1 and update the tag array to [$5_{1}, 5_{2},
  5_{3}, 5_{4}, 5_{5}, 2_{1}, 2_{2}$, 0]. After the window grows by 1
in step (h), ``816" is again found as a match. The tag array is
updated to [$5_{1}, 5_{2}, 5_{3}, 5_{4}, 5_{5}, 3_{1}, 3_{2},
  3_{3}$]. The window does not grow or slide any more since it has
reached the end of the password. In the last step (i), the tag array
is ready to be used in computing the Coverage value. Based on
Equation~\ref{eq1}, the coverage is computed as \[ CVG = \sum_{i=1}^2
{{l_i^2} \over {L^2}} = {{5^2 + 3^2}\over{8^2}}= 0.52.\]

\begin{figure}[t]
\centering
  \caption{Coverage - An Example.}{}
  \label{f1}
  \centering
    \includegraphics[width=0.3\textwidth]{fig/cvgfig}
\caption*{Grey boxes hold unvisited password symbols. Yellow and red
  boxes denote that the symbols inside are covered by the sliding
  window. White boxes denote the symbols inside have been settled
  (window stops extending). }

\end{figure}


%In order to show that Coverage is an accurate and effective metric, we present four features of Coverage and explain why we need these features.

%\begin{enumerate}[leftmargin=*]
%\item 
%By the nature of Equation~\ref{eq1}, Coverage ranges from 0 to 1, in which 0 means no personal information is matched to any password segment and 1 means the entire password is perfectly matched to one type of personal information (i.e., a perfect continous match). The easy-to-handle format (a float number) and range make Coverage convenient to be used in various scenarios.
%\item Coverage can be universally applicable for its simplicity. Any kind of personal information can be formatted as a string, check whether or not a password segment is a substring of the string is straightforward. Besides, a few variations of personal information strings may be applied to enhance the completeness and accuracy (like names in our application). Therefore Coverage can consistently serve its purpose given different sets of personal information.
%\item Coverage can reflect the length of personal information. We need this feature because longer matched password segment naturally indicates stronger correlation. From Equation~\ref{1}, for a matched password segment, longer the segment implies larger numerator, and therefore higher Coverage when the length of the password is unchanged. It is obvious Coverage measures the correlation strength in this sense. 

Coverage is independent of password datasets. As long as we can build
a complete string list of personal information, Coverage can
accurately quantify the correlation between a user's password and its
personal information. For personal information segments with the same
length, Coverage stresses the continuation of matching. A continuous
match is stronger than fragmented matches. That is to say, for a given
password of length $L$, a matched segment of length $l$ ($l<L$) has
stronger correlation to personal information than two matched segments
of length $l_1$ and $l_2$ with $l = l_1 + l_2$. For example, a matched
segment of length 6 is expected to have stronger correlation than 2
matched segments of length 3. This feature of Coverage is desirable
because multiple shorter segments (i.e., originated from different
types of personal information) are usually harder to guess and may
involve a wrong match (coincidence). Since it is difficult to
differentiate a real match and a coincidence match, we would like to
minimize the effect of wrong matches by taking squares of the matched
segments to compute Coverage, in favor of a continuous match.
%\end{enumerate}

\subsection{Coverage Results on 12306}
We compute the value of Coverage for each user in the 12306 dataset. The result is shown as a cumulative distribution function in Figure~\ref{f2}. To easily understand the value of Coverage,  a few examples are given below for showing the implication of a roughly 0.2 Coverage. Assume that we have a 10-symbol long password. One matched segment with length 5 will yield 0.25 Coverage. Two matched segments with length 3 (i.e., in total 6 symbols are matched to personal information) yield 0.18 Coverage. And 5 matched segments with length 2 (i.e., all symbols are matched but in a fragmented fashion) yield 0.2 Coverage. Apparently Coverage of 0.2 indicates a fairly high correlation between personal information and a password. With such knowledge, we have the following observations from Figure~\ref{f2}.
\begin{enumerate}[leftmargin=*]
\item The median value for a user's Coverage is 0.186, implying that a significant portion of user passwords have relatively high correlation to personal information.
\item About 9.9\% of users have zero Coverage. Zero Coverage indicates that no personal information is included in a user password.
% correlation between the users' passwords and their personal information.
\item About 10.5\% of users have Coverage of one, which means that 10.5\% of passwords are perfectly matched to exactly one type of personal information. However, only 13.4\% users have Coverage higher than 0.5. 
\end{enumerate}

\begin{figure}[t]
\centering
  \caption{Coverage distribution - 12306.}{}
  \label{f2}
  \centering
    \includegraphics[width=0.35\textwidth]{fig/cvghist}
\end{figure}

The average Coverage for the 12306 dataset is 0.309. We also compute the average Coverages for male and female groups that are used in Section~\ref{genderdifference}, in which we observe that male users are more likely to include personal information in their passwords. It turns out that the average Coverage for the male group is 0.314 and the average Coverage for the female group is 0.269. Our result indicates that the correlation for male users is higher than that of female users. It complies with our previous observation. Conversely, it also shows that Coverage works very well to quantify the correlation between passwords and personal information.

\subsection{Coverage Usage}
%Coverage can be used in many scenarios. Firstly, it can be used as a general metric to describe a dataset. Coverage directly reflects the correlation between password and available personal information. Investigating how users from different systems behave regarding to constructing their passwords using personal information would be an interesting future work. 

Apparently Coverage would be very useful for password strength meters, which have been reported as mostly ad-hoc \cite{de2014very}. Most meters dumbly give scores based on password structure and length, or blacklist commonly used passwords (such as notorious ``password"). There are also meters that do simple social profile analysis, such as passwords cannot contain the users' names or passwords cannot be the same as account names. However, these simple analysis mechanisms can be easily fooled around by mangling a password a little. Using the metric of Coverage, password strength meters will be able to more accurately measure the strength of a password.
% to cover the unnoticed corner of personal information. 
%While registering an online account, a user is often required to build its personal profile, including name, %birthday, email address, etc. At this moment password meters will offer feedback of password strength %normally in bar or score forms. Since personal information is available, Coverage matches the scenario %perfectly. In addition, 
It is straightforward to implement Coverage as a part of strength measurement (only a few lines of Javascript should do). 
%Apparently, higher Coverage indicates vulnerable passwords. Systems can even ban passwords when they surpass a preset Coverage threshold. 
More importantly, users cannot easily escape Coverage measurement through simple mangling, and thus are forced to select more secure passwords.

Coverage can also be integrated into existing tools to enhance their capabilities. There are several Markov Model based tools that predict the next symbol when a user creates a password \cite{komanduri2014telepathwords,weir2010testing}. These tools rank the probability of the next symbol based on Markov Model learned from dictionaries or leaked datasets, and then show the most probable several predictions. Users would be surprised to find that the next symbol in their mind matches exactly the tool's output. They then switch to a more unpredictable password symbol. Coverage helps to determine if personal information prediction ranks high enough in probability to remind a user of avoiding the use of personal information in password creation. Thus, it is able to work with these tools as an enhancement.
% -- When Coverage is rather high, it is easy to predict what the next symbol of user input will be.

Finally, average Coverage could be used as an indicator of dataset security, because cracking a dataset with high average Coverage is expected to be much easier than a dataset with low average Coverage. %Specifically, it is able to imply the effectiveness of Personal-PCFG -- a password cracker we proposed in Section~\ref{personalpcfg} that leverages personal information. 
Since password cracking consumes relatively long time and significant efforts, computing the average Coverage of a targeted dataset can shed light on the dataset security as well as predicting the cracking results. 


